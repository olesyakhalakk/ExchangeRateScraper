package main

import (
	"fmt"
	"log"
	"price-scraper/scraper"
	"time"
)

func main() {
	for {
		fmt.Println("üìå –ü–æ—á–∞—Ç–æ–∫ –∑–±–æ—Ä—É –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç...")

		// –ö–∞—Ä—Ç–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É
		buyRates := make(map[string]float64)
		sellRates := make(map[string]float64)

		// –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –∑ Minfin
		usdMinfinBuy, usdMinfinSell, err := scraper.GetMinfinRate("USD")
		if err == nil {
			buyRates["Minfin"] = usdMinfinBuy
			sellRates["Minfin"] = usdMinfinSell
		} else {
			log.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Minfin:", err)
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –∑ BestObmin
		usdBestObminBuy, usdBestObminSell, err := scraper.GetBestObminRate()
		if err == nil {
			buyRates["BestObmin"] = usdBestObminBuy
			sellRates["BestObmin"] = usdBestObminSell
		} else {
			log.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É BestObmin:", err)
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –∑ KytObmin
		usdKytObminBuy, usdKytObminSell, err := scraper.GetKytObminRate()
		if err == nil {
			buyRates["KytObmin"] = usdKytObminBuy
			sellRates["KytObmin"] = usdKytObminSell
		} else {
			log.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Kyt-Obmin:", err)
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –∑ TopObmin
		usdTopObminBuy, usdTopObminSell, err := scraper.GetTopObminRate()
		if err == nil {
			buyRates["TopObmin"] = usdTopObminBuy
			sellRates["TopObmin"] = usdTopObminSell
		} else {
			log.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É TopObmin:", err)
		}

		// –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
		fmt.Println("\nüìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç:")
		fmt.Println("üíµ –ö—É–ø—ñ–≤–ª—è:")
		for site, rate := range buyRates {
			fmt.Printf("%s: %.2f UAH/USD\n", site, rate)
		}

		fmt.Println("\nüí∞ –ü—Ä–æ–¥–∞–∂:")
		for site, rate := range sellRates {
			fmt.Printf("%s: %.2f UAH/USD\n", site, rate)
		}

		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –∫—É—Ä—Å –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ (–Ω–∞–π–±—ñ–ª—å—à–∏–π)
		var bestBuySite string
		var bestBuyRate float64 = -1 // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ

		for site, rate := range buyRates {
			if rate > bestBuyRate {
				bestBuyRate = rate
				bestBuySite = site
			}
		}

		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É (–Ω–∞–π–º–µ–Ω—à–∏–π)
		var bestSellSite string
		var bestSellRate float64 = -1 // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ

		for site, rate := range sellRates {
			if bestSellRate == -1 || rate < bestSellRate {
				bestSellRate = rate
				bestSellSite = site
			}
		}

		// –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –∫—É—Ä—Å–∏
		if bestBuyRate > 0 {
			fmt.Printf("\n‚úÖ –ù–∞–π–∫—Ä–∞—â–∏–π –∫—É—Ä—Å –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: %.2f UAH/USD –Ω–∞ %s\n", bestBuyRate, bestBuySite)
		} else {
			fmt.Println("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ.")
		}

		if bestSellRate > 0 {
			fmt.Printf("‚úÖ –ù–∞–π–∫—Ä–∞—â–∏–π –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: %.2f UAH/USD –Ω–∞ %s\n", bestSellRate, bestSellSite)
		} else {
			fmt.Println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.")
		}

		fmt.Println("\nüîÑ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω...")
		time.Sleep(10 * time.Minute)
	}
}
